#BlueJ class context
comment0.target=Controller
comment0.text=\r\n\ \ \ \ <h2>This\ handles\ and\ directs\ key\ events</h2>\r\n\ \ \ \ \r\n\ \ \ \ <p>The\ breakout\ controller\ receives\ KeyPress\ events\ from\ the\ GUI\ (via\r\n\ \ \ \ the\ KeyEventHandler).\ It\ maps\ the\ keys\ onto\ methods\ in\ the\ model\ and\r\n\ \ \ \ calls\ them\ appropriately</p>\r\n\ \ \ \ \r\n\ \ \ \ @author\ Roger\ Evans\ (modified\ by\ Ryan\ Light)\r\n
comment1.params=
comment1.target=Controller()
comment1.text=\r\n\ \ \ \ \ \ \ \ <h2>Constructor</h2>\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ @author\ Roger\ Evans\r\n
comment2.params=event
comment2.target=void\ userKeyInteraction(javafx.scene.input.KeyEvent)
comment2.text=\r\n\ \ \ \ \ \ \ \ <h2>This\ inturprets\ key\ events</h2>\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ <p>This\ is\ how\ the\ View\ talks\ to\ the\ Controller\r\n\ \ \ \ \ \ \ \ and\ how\ the\ Controller\ talks\ to\ the\ Model.\r\n\ \ \ \ \ \ \ \ This\ method\ is\ called\ by\ the\ View\ to\ respond\ to\ key\ presses\ in\ the\ GUI\r\n\ \ \ \ \ \ \ \ The\ controller's\ job\ is\ to\ decide\ what\ to\ do.\ In\ this\ case\ it\ converts\r\n\ \ \ \ \ \ \ \ the\ keypresses\ into\ commands\ which\ are\ run\ in\ the\ model</p>\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ <p>As\ mentioned\ in\ the\ {@code\ View}\ Javadoc,\ I\ didn't\ like\ the\ delay\ when\ holding\ down\ the\ keys\ in\ order\ to\ \r\n\ \ \ \ \ \ \ \ move\ the\ bat.\ \ This\ is\ caused\ by\ Windows\ default\ key\ behaviour\ so\ isn't\ something\ that\ can\ be\ 'fixed'\ in\ the\ game.\r\n\ \ \ \ \ \ \ \ After\ doing\ some\ research,\ I\ decided\ to\ implement\ another\ key\ handler,\ which\ would\ detect\ key\ released.\ \ When\ the\ left\ or\ \r\n\ \ \ \ \ \ \ \ right\ arrows\ are\ pushed,\ the\ game\ will\ set\ the\ {@code\ BAT_DIR}\ value\ to\ positive\ or\ negative\ accordingly,\ then\ the\ {@code\ model.moveBat()}\r\n\ \ \ \ \ \ \ \ method\ will\ move\ it.\ \ When\ the\ key\ is\ released,\ {@code\ BAT_DIR}\ will\ be\ set\ to\ zero,\ which\ will\ stop\ the\ bat.\ \ This\ stops\ the\ inherent\ delay\r\n\ \ \ \ \ \ \ \ due\ to\ Windows\ pausing\ to\ determine\ if\ a\ key\ is\ tapped\ or\ held\ down.\ \ I\ also\ tied\ in\ the\ {@code\ CTRL}\ button,\ which\ acts\ as\ a\ speed\ modifier\r\n\ \ \ \ \ \ \ \ when\ that\ is\ held\ down\ as\ the\ bat\ is\ moved.\ \ I'm\ happy\ with\ the\ results\ and\ the\ bat\ feels\ much\ more\ responsive\ now.</p>\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ <p>I\ also\ removed\ the\ fast\ and\ slow\ buttons\ because\ I\ wanted\ the\ game\ to\ dictate\ the\ pace\ of\ the\ ball\ (by\ speeding\ up\ over\ time),\ and\ I\ didn't\ want\ the\r\n\ \ \ \ \ \ \ \ user\ to\ countermand\ that\ decision.</p>\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ @author\ Roger\ Evans\ (modified\ by\ Ryan\ Light)\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ @param\ event\ The\ key\ event\r\n
numComments=3
